name: Build and Deploy to Cloud Run

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO_NAME: cicdai-repo

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Create Artifact Registry Repository
        run: |
          gcloud artifacts repositories create ${{ env.REPO_NAME }} \
            --repository-format=docker \
            --location=${{ secrets.GCP_REGION }} \
            --quiet || true

      # Build all images first
      - name: Build Backend Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/backend:${{ github.sha }} ./backend

      - name: Build Frontend Docker Image
        run: |
          # Create Dockerfile if it doesn't exist
          if [ ! -f frontend/Dockerfile ]; then
            cat > frontend/Dockerfile << 'EOF'
          # Build stage
          FROM node:18-alpine as builder
          
          WORKDIR /app
          
          # Copy package files
          COPY package*.json ./
          
          # Install dependencies
          RUN npm ci
          
          # Copy source code
          COPY . .
          
          # Build the application
          RUN npm run build
          
          # Production stage
          FROM nginx:alpine
          
          # Copy built files
          COPY --from=builder /app/dist /usr/share/nginx/html
          
          # Add nginx configuration for SPA - Cloud Run needs port 8080
          RUN echo 'server { \
              listen 8080; \
              server_name _; \
              root /usr/share/nginx/html; \
              index index.html; \
              location / { \
                  try_files $uri $uri/ /index.html; \
              } \
              location /api { \
                  return 404; \
              } \
              location /health { \
                  access_log off; \
                  return 200 "healthy\n"; \
                  add_header Content-Type text/plain; \
              } \
          }' > /etc/nginx/conf.d/default.conf && \
          sed -i 's/listen       80;/listen       8080;/g' /etc/nginx/conf.d/default.conf
          
          # Cloud Run expects port 8080
          EXPOSE 8080
          
          CMD ["nginx", "-g", "daemon off;"]
          EOF
          fi
          
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/frontend:${{ github.sha }} ./frontend

      # Push all images
      - name: Push Backend Image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/backend:${{ github.sha }}

      - name: Push Frontend Image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/frontend:${{ github.sha }}

      # Deploy Frontend first (no dependencies)
      - name: Deploy Frontend to Cloud Run
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: cicdai-frontend
          image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/frontend:${{ github.sha }}
          region: ${{ secrets.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=8080
            --memory=512Mi
            --cpu=1
            --max-instances=10
            --min-instances=0

      # Deploy Backend with Frontend URL
      - name: Deploy Backend to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: cicdai-backend
          image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/backend:${{ github.sha }}
          region: ${{ secrets.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=8000
            --memory=512Mi
            --cpu=1
            --max-instances=10
            --min-instances=0
          env_vars: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
            FRONTEND_URL=${{ steps.deploy-frontend.outputs.url }}

      # Update Frontend with Backend URL (create env.js or update config)
      - name: Create Frontend Configuration
        run: |
          echo "Frontend deployed at: ${{ steps.deploy-frontend.outputs.url }}"
          echo "Backend deployed at: ${{ steps.deploy-backend.outputs.url }}"
          echo ""
          echo "IMPORTANT: Update your frontend configuration to use the backend URL:"
          echo "VITE_API_URL=${{ steps.deploy-backend.outputs.url }}"

      # Output deployment URLs
      - name: Show Deployment URLs
        run: |
          echo "âœ… Deployment Successful!"
          echo "Frontend URL: ${{ steps.deploy-frontend.outputs.url }}"
          echo "Backend URL: ${{ steps.deploy-backend.outputs.url }}"
          echo ""
          echo "Next steps:"
          echo "1. Update your frontend .env to use the backend URL"
          echo "2. Configure custom domains if needed"
          echo "3. Set up monitoring and alerts"

      # Run basic health checks
      - name: Health Check
        run: |
          echo "Checking backend health..."
          curl -f ${{ steps.deploy-backend.outputs.url }}/health || echo "Backend health check failed"
          
          echo "Checking frontend..."
          curl -f ${{ steps.deploy-frontend.outputs.url }} || echo "Frontend check failed"
