name: Build and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  REGISTRY: ${{ secrets.GCP_REGION }}-docker.pkg.dev
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REPO_NAME: cicdai-repo

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_REGION }}-docker.pkg.dev

      - name: Create Artifact Registry Repository
        run: |
          gcloud artifacts repositories create ${{ env.REPO_NAME }} \
            --repository-format=docker \
            --location=${{ secrets.GCP_REGION }} \
            --quiet || true

      # Deploy Frontend to Vercel
      - name: Deploy Frontend to Vercel
        id: deploy-frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          cd frontend
          npm install -g vercel@latest
          
          # Get production URL from Vercel
          FRONTEND_URL=$(vercel --token=$VERCEL_TOKEN --prod --yes 2>&1 | tail -1)
          echo "preview-url=$FRONTEND_URL" >> $GITHUB_OUTPUT
          echo "Frontend deployed to: $FRONTEND_URL"

      # Build and Deploy Backend to Cloud Run
      - name: Build Backend Docker Image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/backend:${{ github.sha }} ./backend

      - name: Push Backend Image
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/backend:${{ github.sha }}

      - name: Deploy Backend to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v1
        with:
          service: cicdai-backend
          image: ${{ env.REGISTRY }}/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/backend:${{ github.sha }}
          region: ${{ secrets.GCP_REGION }}
          flags: |
            --allow-unauthenticated
            --port=8000
            --memory=512Mi
            --cpu=1
            --max-instances=10
            --min-instances=0
          env_vars: |
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            REDIS_URL=${{ secrets.REDIS_URL }}
            SECRET_KEY=${{ secrets.SECRET_KEY }}
            ENCRYPTION_KEY=${{ secrets.ENCRYPTION_KEY }}
            GITHUB_CLIENT_ID=${{ secrets.GH_CLIENT_ID }}
            GITHUB_CLIENT_SECRET=${{ secrets.GH_CLIENT_SECRET }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_OAUTH_CLIENT_SECRET }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
            FRONTEND_URL=${{ steps.deploy-frontend.outputs.preview-url }}

      # Update Vercel Environment Variables and Redeploy
      - name: Update Vercel Environment Variables
        run: |
          # Delete existing VITE_API_URL if exists
          curl -X DELETE "https://api.vercel.com/v9/projects/${{ secrets.VERCEL_PROJECT_ID }}/env/VITE_API_URL" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" || true
          
          # Create new VITE_API_URL
          curl -X POST "https://api.vercel.com/v10/projects/${{ secrets.VERCEL_PROJECT_ID }}/env" \
            -H "Authorization: Bearer ${{ secrets.VERCEL_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{
              "key": "VITE_API_URL",
              "value": "${{ steps.deploy-backend.outputs.url }}",
              "type": "plain",
              "target": ["production", "preview", "development"]
            }'

      # Redeploy Frontend with updated environment variable
      - name: Redeploy Frontend to Vercel
        working-directory: ./frontend
        run: |
          # Force new deployment with updated env vars
          vercel --prod --force --token=${{ secrets.VERCEL_TOKEN }}

      # Output deployment URLs
      - name: Show Deployment URLs
        run: |
          echo "âœ… Deployment Successful!"
          echo "Frontend URL: ${{ steps.deploy-frontend.outputs.preview-url }}"
          echo "Backend URL: ${{ steps.deploy-backend.outputs.url }}"
          echo ""
          echo "Next steps:"
          echo "1. The frontend has been redeployed with the correct backend URL"
          echo "2. Configure custom domains if needed"
          echo "3. Set up monitoring and alerts"

      # Health checks
      - name: Health Check
        run: |
          echo "Checking backend health..."
          curl -f ${{ steps.deploy-backend.outputs.url }}/health || echo "Backend health check failed"
          
          echo "Checking frontend..."
          curl -f ${{ steps.deploy-frontend.outputs.preview-url }} || echo "Frontend check failed"